// generated by "sampctl package init"
#include <a_samp>

#include <sscanf2> 

#include "./includes/izcmd.inc"
#include "./includes/sampvoice.inc"

#define GLOBAL_CHANNEL 0
#define LOCAL_CHANNEL 1

new SV_GSTREAM:gstream = SV_NULL;
new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };

#define DIALOGID_FERIDOS 100

new PlayerText:TD_PlayerDied[MAX_PLAYERS][6];
new PlayerDied_timeToRespawn[MAX_PLAYERS] = {};
new PlayerDied_deadPlayers[MAX_PLAYERS] = {};

main() 
{
	// write code here and run "sampctl package build" to compile
	// then run "sampctl package run" to run it

	print("Test 4");
}

public OnGameModeInit()
{
    // Uncomment the line to enable debug mode
    // SvDebug(SV_TRUE);

    gstream = SvCreateGStream(0xffff0000, "Global");

	SetTimer("PlayerDied_CheckRevive", 1000, true);
}

public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid) 
{
	printf("[OnPlayerActivationKeyPress] playerid=%d keyid=%d", playerid, keyid);

    // Attach player to local stream as speaker if 'B' key is pressed
    if (keyid == 0x42 && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
    // Attach the player to the global stream as a speaker if the 'Z' key is pressed
    if (keyid == 0x5A && gstream) SvAttachSpeakerToStream(gstream, playerid);
}

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
	printf("[OnPlayerActivationKeyRelease] playerid=%d keyid=%d", playerid, keyid);

    // Detach the player from the local stream if the 'B' key is released
    if (keyid == 0x42 && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);
    // Detach the player from the global stream if the 'Z' key is released
    if (keyid == 0x5A && gstream) SvDetachSpeakerFromStream(gstream, playerid);
}

public OnPlayerConnect(playerid)
{
	printf("[OnPlayerConnect] playerid=%d", playerid);

	DetectAndLoadVoip(playerid);

	PlayerDied_CreateTextdraws(playerid);

	PlayerDied_deadPlayers[playerid] = false;
}

public OnPlayerDisconnect(playerid, reason)
{
    // Removing the player's local stream after disconnecting
    if (lstream[playerid])
    {
        SvDeleteStream(lstream[playerid]);
        lstream[playerid] = SV_NULL;
    }

	PlayerDied_deadPlayers[playerid] = false;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{
    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	SendClientMessageToAll(-1, "player died");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	SpawnPlayer(playerid);
	SetPlayerPos(playerid, x, y, z);
	SetPlayerHealth(playerid, 100.0);

	TogglePlayerControllable(playerid, false);
	ApplyAnimation(playerid, "ped", "KO_skid_back", 1.0, false, true, true, true, 1, 1);

	SendClientMessageToAll(-1, "O player agora esta inconsciente");

	PlayerDied_timeToRespawn[playerid] = 10;
	PlayerDied_deadPlayers[playerid] = true;
	PlayerDied_ToggleTextdraws(playerid, true);

	return 1;
}

forward PlayerDied_CheckRevive();
public PlayerDied_CheckRevive()
{
	for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
		if(PlayerDied_timeToRespawn[playerid] <= 0) continue;
		
		PlayerDied_timeToRespawn[playerid] -= 1;

		if(PlayerDied_timeToRespawn[playerid] <= 0)
		{
			PlayerDied_ToggleGiveUpScreen(playerid);

			//format(message, sizeof(message), "Respawning player %d", playerid);
			//SendClientMessage(playerid, 0xFFFFFFFF, message);
			//PlayerDied_Revive(playerid);
		}

		PlayerDied_UpdateTextdraws(playerid);
	}
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	PlayerDied_OnPlayerClickPlayerTextDraw(playerid, playertextid);
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	printf("OnDialogResponse %d", playerid);
	printf("dialogid %d", dialogid);
	printf("response %d", response);
	printf("listitem %d", listitem);
	printf("inputtext %s", inputtext);
}

public OnPlayerSpawn(playerid)
{
	return 1;
}


public OnGameModeExit()
{
    if (gstream) SvDeleteStream(gstream);
}

CMD:p(playerid, params[])
{
	SetPlayerPos(playerid, 0, 0, 10);
	SendClientMessageToAll(-1, "teleport to spawn");
	return 1;
} 

CMD:kill(playerid, params[])
{
	SendClientMessageToAll(-1, "killing player");
	SetPlayerHealth(playerid, 0.0);
	return 1;
} 

CMD:revive(playerid, params[])
{
	SendClientMessageToAll(-1, "reviving player");
	PlayerDied_Revive(playerid);
	return 1;
} 

CMD:feridos(playerid, params[])
{
	new string[256];

	format(string, sizeof(string), "Jogador\tDistancia\n");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	for(new deadId = 0; deadId < sizeof(PlayerDied_deadPlayers); deadId++)
	{
		if(!PlayerDied_deadPlayers[deadId]) continue;

		new name[256];

		new Float:deadx, Float:deady, Float:deadz;
		GetPlayerPos(deadId, deadx, deady, deadz);

		new Float:distance = GetPlayerDistanceFromPoint(playerid, deadx, deady, deadz);

		if(!IsPlayerConnected(deadId))
		{
			format(name, sizeof(name), "DESCONECTADO");
		} else {
			GetPlayerName(deadId, name, sizeof(name));
		}

    	format(string, sizeof(string), "%s{FFFFFF}%s (%d)\t{FFFF00}%.1fm\n", string, name, deadId, distance);
	}

	ShowPlayerDialog(playerid, DIALOGID_FERIDOS, DIALOG_STYLE_TABLIST_HEADERS, "Feridos", string, "Fechar", "Localizar");
	return 1;
} 

stock PlayerDied_CreateTextdraws(playerid)
{
	if(TD_PlayerDied[playerid][0]) return;

	TD_PlayerDied[playerid][0] = CreatePlayerTextDraw(playerid, 320.000000, 174.000000, "Voce esta inconsciente");
	PlayerTextDrawLetterSize(playerid, TD_PlayerDied[playerid][0], 0.572083, 1.952591);
	PlayerTextDrawAlignment(playerid, TD_PlayerDied[playerid][0], 2);
	PlayerTextDrawColor(playerid, TD_PlayerDied[playerid][0], -16776961);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TD_PlayerDied[playerid][0], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_PlayerDied[playerid][0], 255);
	PlayerTextDrawFont(playerid, TD_PlayerDied[playerid][0], 3);
	PlayerTextDrawSetProportional(playerid, TD_PlayerDied[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][0], 0);

	TD_PlayerDied[playerid][1] = CreatePlayerTextDraw(playerid, 312.083068, -1.333348, "box"); //fundo preto
	PlayerTextDrawLetterSize(playerid, TD_PlayerDied[playerid][1], 0.000000, 50.083343);
	PlayerTextDrawTextSize(playerid, TD_PlayerDied[playerid][1], 0.000000, 664.000000);
	PlayerTextDrawAlignment(playerid, TD_PlayerDied[playerid][1], 2);
	PlayerTextDrawColor(playerid, TD_PlayerDied[playerid][1], -1);
	PlayerTextDrawUseBox(playerid, TD_PlayerDied[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, TD_PlayerDied[playerid][1], 100); //preto / alpha
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, TD_PlayerDied[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_PlayerDied[playerid][1], 255);
	PlayerTextDrawFont(playerid, TD_PlayerDied[playerid][1], 1);
	PlayerTextDrawSetProportional(playerid, TD_PlayerDied[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][1], 0);

	TD_PlayerDied[playerid][2] = CreatePlayerTextDraw(playerid, 318.750000, 222.148101, "~w~Aguarde ~y~20 ~w~segundos");
	PlayerTextDrawLetterSize(playerid, TD_PlayerDied[playerid][2], 0.261250, 1.885184);
	PlayerTextDrawAlignment(playerid, TD_PlayerDied[playerid][2], 2);
	PlayerTextDrawColor(playerid, TD_PlayerDied[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TD_PlayerDied[playerid][2], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_PlayerDied[playerid][2], 255);
	PlayerTextDrawFont(playerid, TD_PlayerDied[playerid][2], 2);
	PlayerTextDrawSetProportional(playerid, TD_PlayerDied[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][2], 0);

	TD_PlayerDied[playerid][3] = CreatePlayerTextDraw(playerid, 320.416656, 344.518615, "Ou aguarde um medico");
	PlayerTextDrawLetterSize(playerid, TD_PlayerDied[playerid][3], 0.326665, 1.703703);
	PlayerTextDrawAlignment(playerid, TD_PlayerDied[playerid][3], 2);
	PlayerTextDrawColor(playerid, TD_PlayerDied[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, TD_PlayerDied[playerid][3], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_PlayerDied[playerid][3], 255);
	PlayerTextDrawFont(playerid, TD_PlayerDied[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, TD_PlayerDied[playerid][3], 1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, TD_PlayerDied[playerid][3], true);

	TD_PlayerDied[playerid][4] = CreatePlayerTextDraw(playerid, 322.500030, 318.074188, "box");
	PlayerTextDrawLetterSize(playerid, TD_PlayerDied[playerid][4], 0.000000, 2.291666);
	PlayerTextDrawTextSize(playerid, TD_PlayerDied[playerid][4], 0.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, TD_PlayerDied[playerid][4], 2);
	PlayerTextDrawColor(playerid, TD_PlayerDied[playerid][4], -1);
	PlayerTextDrawUseBox(playerid, TD_PlayerDied[playerid][4], 1);
	PlayerTextDrawBoxColor(playerid, TD_PlayerDied[playerid][4], -1996488449);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, TD_PlayerDied[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_PlayerDied[playerid][4], 255);
	PlayerTextDrawFont(playerid, TD_PlayerDied[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, TD_PlayerDied[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][4], 0);
	PlayerTextDrawSetSelectable(playerid, TD_PlayerDied[playerid][4], true);

	TD_PlayerDied[playerid][5] = CreatePlayerTextDraw(playerid, 322.500183, 319.629760, "Desistir");
	PlayerTextDrawLetterSize(playerid, TD_PlayerDied[playerid][5], 0.367916, 2.066665);
	PlayerTextDrawTextSize(playerid, TD_PlayerDied[playerid][5], 0.000000, 85.000000);
	PlayerTextDrawAlignment(playerid, TD_PlayerDied[playerid][5], 2);
	PlayerTextDrawColor(playerid, TD_PlayerDied[playerid][5], -1);
	//PlayerTextDrawUseBox(playerid, TD_PlayerDied[playerid][5], 1);
	//PlayerTextDrawBoxColor(playerid, TD_PlayerDied[playerid][5], 1718484992);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, TD_PlayerDied[playerid][5], 1);
	PlayerTextDrawBackgroundColor(playerid, TD_PlayerDied[playerid][5], 255);
	PlayerTextDrawFont(playerid, TD_PlayerDied[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TD_PlayerDied[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TD_PlayerDied[playerid][5], 0);
	PlayerTextDrawSetSelectable(playerid, TD_PlayerDied[playerid][5], true);
}

stock PlayerDied_UpdateTextdraws(playerid)
{
	new message[256];
	format(message, sizeof(message), "~w~Aguarde ~y~%d ~w~segundos", PlayerDied_timeToRespawn[playerid]);
	SendClientMessage(playerid, 0xFFFFFFFF, message);

	PlayerTextDrawSetString(playerid, TD_PlayerDied[playerid][2], message);
}

stock PlayerDied_ToggleTextdraws(playerid, bool:visible)
{
	for (new i = 0; i < 6; i++)
	{
		if(visible)
		{
			printf("showing td %d", i);
			PlayerTextDrawShow(playerid, TD_PlayerDied[playerid][i]);
			
		} else {
			printf("hidding td %d", i);
			PlayerTextDrawHide(playerid, TD_PlayerDied[playerid][i]);
		}
	}
	
	if(visible)
	{
		PlayerDied_UpdateTextdraws(playerid);
		PlayerDied_ToggleGiveUpScreen(playerid);
	}
}

stock PlayerDied_ToggleGiveUpScreen(playerid)
{
	new visible = PlayerDied_timeToRespawn[playerid] <= 0;

	if(visible)
	{
		SelectTextDraw(playerid, 0xFF0000FF);
	}

	for (new i = 3; i < 6; i++)
	{
		printf("showing td %d", i);
		if(visible)
		{
			PlayerTextDrawShow(playerid, TD_PlayerDied[playerid][i]);
		} else {
			PlayerTextDrawHide(playerid, TD_PlayerDied[playerid][i]);
		}
	}
}

stock PlayerDied_Revive(playerid)
{
	TogglePlayerControllable(playerid, true);
	ClearAnimations(playerid, 1);

	// desbugar a anim (trocar, caso saiba um jeito melhor de desbugar)
	ApplyAnimation(playerid, "Ped", "handsup", 3.0, 0, 0, 0, 0, 10);

	PlayerDied_timeToRespawn[playerid] = 0;
	PlayerDied_deadPlayers[playerid] = false;
	PlayerDied_ToggleTextdraws(playerid, false);

	SendClientMessageToAll(-1, "O player reviveu");
}

stock PlayerDied_OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	SendClientMessageToAll(-1, "clicked textdraw");

	if(playertextid == TD_PlayerDied[playerid][3])
	{
		PlayerDied_Revive(playerid);
		CancelSelectTextDraw(playerid);

		SetPlayerPos(playerid, 162.4130, -51.3029, 1.5781);

		// desbugar a anim (trocar, caso saiba um jeito melhor de desbugar)
		ApplyAnimation(playerid, "Ped", "handsup", 3.0, 0, 0, 0, 0, 10);
	}
}

stock DetectAndLoadVoip(playerid)
{
	if (SvGetVersion(playerid) == SV_NULL) // Checking for plugin availability
    {
        SendClientMessage(playerid, -1, "Failed to find plugin.");
    } else {
		if (SvHasMicro(playerid) == SV_FALSE) // Checking for microphone availability
		{
			SendClientMessage(playerid, -1, "Failed to find microphone.");
		} else {
			SendClientMessage(playerid, -1, "Found microphone");	

			lstream[playerid] = SvCreateDLStreamAtPlayer(40.0, SV_INFINITY, playerid, 0xff0000ff, "Local");

			if(lstream[playerid])
			{
				printf("lstream = %d", lstream[playerid]);

				SendClientMessage(playerid, -1, "Press Z to talk to global chat and B to talk to local chat.");

				// Attach the player to the global stream as a listener
				if (gstream)
				{
					printf("attach to gstream = %d", gstream);
					
					SvAttachListenerToStream(gstream, playerid);
				}

				// Assign microphone activation keys to the player
				SvAddKey(playerid, 0x42);
				SvAddKey(playerid, 0x5A);
			}
		}
	}
}