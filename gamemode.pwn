// generated by "sampctl package init"
#include <a_samp>

#include "./includes/sampvoice.inc"

#define GLOBAL_CHANNEL 0
#define LOCAL_CHANNEL 1

new SV_GSTREAM:gstream = SV_NULL;
new SV_LSTREAM:lstream[MAX_PLAYERS] = { SV_NULL, ... };

main() 
{
	// write code here and run "sampctl package build" to compile
	// then run "sampctl package run" to run it

	print("Test 4");
}

public SV_VOID:OnPlayerActivationKeyPress(SV_UINT:playerid, SV_UINT:keyid) 
{
	printf("[OnPlayerActivationKeyPress] playerid=%d keyid=%d", playerid, keyid);

    // Attach player to local stream as speaker if 'B' key is pressed
    if (keyid == 0x42 && lstream[playerid]) SvAttachSpeakerToStream(lstream[playerid], playerid);
    // Attach the player to the global stream as a speaker if the 'Z' key is pressed
    if (keyid == 0x5A && gstream) SvAttachSpeakerToStream(gstream, playerid);
}

public SV_VOID:OnPlayerActivationKeyRelease(SV_UINT:playerid, SV_UINT:keyid)
{
	printf("[OnPlayerActivationKeyRelease] playerid=%d keyid=%d", playerid, keyid);

    // Detach the player from the local stream if the 'B' key is released
    if (keyid == 0x42 && lstream[playerid]) SvDetachSpeakerFromStream(lstream[playerid], playerid);
    // Detach the player from the global stream if the 'Z' key is released
    if (keyid == 0x5A && gstream) SvDetachSpeakerFromStream(gstream, playerid);
}

public OnPlayerConnect(playerid)
{
	SendClientMessage(playerid, -1, "Test 4");

	printf("[OnPlayerConnect] playerid=%d", playerid);

	if (SvGetVersion(playerid) == SV_NULL) // Checking for plugin availability
    {
        SendClientMessage(playerid, -1, "Failed to find plugin.");
    } else {
		if (SvHasMicro(playerid) == SV_FALSE) // Checking for microphone availability
		{
			SendClientMessage(playerid, -1, "Failed to find microphone.");
		} else {
			SendClientMessage(playerid, -1, "Found microphone");	

			lstream[playerid] = SvCreateDLStreamAtPlayer(40.0, SV_INFINITY, playerid, 0xff0000ff, "Local");

			if(lstream[playerid])
			{
				printf("lstream = %d", lstream[playerid]);

				SendClientMessage(playerid, -1, "Press Z to talk to global chat and B to talk to local chat.");

				// Attach the player to the global stream as a listener
				if (gstream)
				{
					printf("attach to gstream = %d", gstream);
					
					SvAttachListenerToStream(gstream, playerid);
				}

				// Assign microphone activation keys to the player
				SvAddKey(playerid, 0x42);
				SvAddKey(playerid, 0x5A);
			}
		}
	}
}

public OnPlayerDisconnect(playerid, reason)
{
    // Removing the player's local stream after disconnecting
    if (lstream[playerid])
    {
        SvDeleteStream(lstream[playerid]);
        lstream[playerid] = SV_NULL;
    }
}

public OnGameModeInit()
{
    // Uncomment the line to enable debug mode
    // SvDebug(SV_TRUE);

    gstream = SvCreateGStream(0xffff0000, "Global");
}

public OnGameModeExit()
{
    if (gstream) SvDeleteStream(gstream);
}